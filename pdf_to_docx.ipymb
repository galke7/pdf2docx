# Install the necessary requirements
!pip install -r /mnt/data/requirements.txt

# Import the required libraries
import os
import cv2
import docx
import pytesseract
import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image
from pdf2image import convert_from_path
from langchain_community.document_loaders import PyPDFLoader
from langchain_core.documents.base import Document
import numpy as np

# Explain the code
explanation = """
# Explanation of `gui_pdf2dox.py`

## Imports
- **os**: Provides functions to interact with the operating system.
- **cv2**: OpenCV library for image processing.
- **docx**: Python library for creating and updating Microsoft Word (.docx) files.
- **pytesseract**: Optical Character Recognition (OCR) tool for Python.
- **tkinter**: Standard GUI (Graphical User Interface) package for Python.
- **filedialog** and **messagebox**: Components of tkinter for file dialogs and message boxes.
- **PIL**: Python Imaging Library, for image processing.
- **pdf2image**: Converts PDF files to images.
- **langchain_community** and **langchain_core**: Libraries for handling PDF documents.
- **numpy**: Fundamental package for scientific computing in Python.

## Functions

### `ocr_pdf_with_preprocessing(pdf_path)`
Performs OCR on image-based PDFs with pre-processing steps:
1. Converts PDF pages to images.
2. Converts images to grayscale.
3. Applies thresholding to the images.
4. Removes noise from the images.
5. Uses Tesseract to extract text from the processed images.

### `select_pdf_file()`
Opens a file dialog to select a PDF file. Updates the GUI with the selected file path and suggests a default output file name.

### `select_output_location()`
Opens a file dialog to choose the save location for the output file. Updates the GUI with the chosen location.

### `convert_pdf_to_docx()`
Main function to convert the selected PDF file to a DOCX file:
1. Reads the selected PDF file.
2. If reading fails, applies OCR with pre-processing.
3. Creates a new DOCX document and adds content from the PDF or OCR results.
4. Saves the DOCX document to the specified location.
5. Displays a success message.

## GUI Setup
Sets up a tkinter-based GUI with:
1. Labels and entry fields for PDF file selection and output file location.
2. Buttons to open file dialogs and start the conversion process.
"""

# Display the explanation
print(explanation)

# Define the functions from the script
def ocr_pdf_with_preprocessing(pdf_path):
    images = convert_from_path(pdf_path)
    text = ""
    for image in images:
        open_cv_image = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
        gray = cv2.cvtColor(open_cv_image, cv2.COLOR_BGR2GRAY)
        _, thresh = cv2.threshold(gray, 128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)
        kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (1, 1))
        opening = cv2.morphologyEx(thresh, cv2.MORPH_OPEN, kernel, iterations=1)
        text += pytesseract.image_to_string(opening)
    return text

def select_pdf_file():
    file_path = filedialog.askopenfilename(filetypes=[("PDF files", "*.pdf")])
    if file_path:
        pdf_path_entry.delete(0, tk.END)
        pdf_path_entry.insert(0, file_path)
        default_output_name = os.path.splitext(os.path.basename(file_path))[0] + ".docx"
        output_filename_entry.delete(0, tk.END)
        output_filename_entry.insert(0, default_output_name)

def select_output_location():
    file_path = filedialog.asksaveasfilename(defaultextension=".docx",
                                             filetypes=[("DOCX files", "*.docx")])
    if file_path:
        output_filename_entry.delete(0, tk.END)
        output_filename_entry.insert(0, file_path)

def convert_pdf_to_docx():
    pdf_path = pdf_path_entry.get()
    if not pdf_path:
        messagebox.showerror("Error", "Please select a PDF file.")
        return

    output_filename = output_filename_entry.get()
    if not output_filename.endswith(".docx"):
        output_filename += ".docx"

    if not os.path.isabs(output_filename):
        pdf_directory = os.path.dirname(pdf_path)
        output_filename = os.path.join(pdf_directory, output_filename)

    docs = []

    try:
        loader = PyPDFLoader(pdf_path)
        loaded_docs = loader.load()
        docs.extend(loaded_docs)
    except ValueError:
        text = ocr_pdf_with_preprocessing(pdf_path)
        doc = docx.Document()
        doc.add_paragraph(text)
        docs.append(doc)

    final_doc = docx.Document()

    for i, pdf_doc in enumerate(docs):
        if isinstance(pdf_doc, Document):
            content = pdf_doc.page_content.strip()
            if content:
                final_doc.add_paragraph(content)
        elif isinstance(pdf_doc, docx.Document):
            for para in pdf_doc.paragraphs:
                final_doc.add_paragraph(para.text)

    final_doc.save(output_filename)
    full_path = os.path.abspath(output_filename)
    messagebox.showinfo("Success", f"DOCX file created successfully as {full_path}")

# Create the GUI
def create_gui():
    global pdf_path_entry, output_filename_entry
    root = tk.Tk()
    root.title("PDF to DOCX Converter")

    # Step 1: Select PDF File
    tk.Label(root, text="STEP 1 â€“ Select PDF File ðŸ“‚").grid(row=0, column=0, padx=10, pady=5, sticky="w")
    pdf_path_entry = tk.Entry(root, width=50)
    pdf_path_entry.grid(row=0, column=1, padx=10, pady=5)
    pdf_select_button = tk.Button(root, text="Open file", command=select_pdf_file)
    pdf_select_button.grid(row=0, column=2, padx=10, pady=5)

    # Step 2: Select where to save new file
    tk.Label(root, text="STEP 2 â€“ Select where to save new file").grid(row=1, column=0, padx=10, pady=5, sticky="w")
    output_filename_entry = tk.Entry(root, width=50)
    output_filename_entry.grid(row=1, column=1, padx=10, pady=5)
    output_location_button = tk.Button(root, text="Save as...", command=select_output_location)
    output_location_button.grid(row=1, column=2, padx=10, pady=5)

    # Start converting button
    convert_button = tk.Button(root, text="Start converting", command=convert_pdf_to_docx)
    convert_button.grid(row=3, column=0, columnspan=3, pady=20)

    root.mainloop()

# Run the GUI
create_gui()
